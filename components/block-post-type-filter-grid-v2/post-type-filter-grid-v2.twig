{# Do not edit this file outside of the component library as your changes will be lost with future updates. #}
{% set ajaxUrl = fn('admin_url', 'admin-ajax.php') %}

{% set blockClassName = 'post-type-filter-grid-v2' %}
{% set classNameEntryPoint = include('entry-points/entry-point-classes.twig', { fields: fields, block: block }, with_context = false) %}
{% set htmlEntryPoint = include('entry-points/entry-point-html.twig', { fields, block, blockClassName, options, environment, is_preview, nav_menus, imagekit_config }, with_context = false) %}
{% set dataAttributeEntryPoint = include('entry-points/entry-point-data-attribute.twig', { fields: fields, block: block }, with_context = false) %}
{% set styleEntryPoint = include('entry-points/entry-point-style.twig', { fields: fields, block: block, is_preview: is_preview }, with_context = false) %}
{% set postType = fields.post_type|ru %}
{% set postFieldConfig = fields[postType ~ '_data'][postType ~ '_fields'] %}
{# <pre>
{{ dump(options) }}

</pre> #}
{% if fields.enable_featured_post and fields.featured_post is not empty %}
	{% set featuredPost = {} %}
	{% set featuredPostData = get_post(fields.featured_post) %}
	{% set featuredPost = featuredPost|merge({'post' : featuredPostData}) %}
	{% set featuredPostCategory = featuredPostData.terms %}
	{% set featuredPostImage = get_image(featuredPostData.meta.post_image) %}
	{% set featuredPost = featuredPost|merge({'post_image_src' : gt_image_mainsrc(featuredPostImage, {'aspect_ratio' : '16x9'})}) %}
	{% set featuredPost = featuredPost|merge({'post_image_srcset' : gt_image_srcset(featuredPostImage, {'aspect_ratio' : '16x9'})}) %}
	{% set featuredPost = featuredPost|merge({'post_image_src_mobile' : gt_image_mainsrc(featuredPostImage, {'aspect_ratio' : '1x1'})}) %}
	{% set featuredPost = featuredPost|merge({'post_image_srcset_mobile' : gt_image_srcset(featuredPostImage, {'aspect_ratio' : '1x1'})}) %}
	{% set featuredPost = featuredPost|merge({'post_image_width' : featuredPostImage.width}) %}
	{% set featuredPost = featuredPost|merge({'post_image_height' : featuredPostImage.height}) %}
	{% set featuredPost = featuredPost|merge({'post_image_alt' : featuredPostImage.alt}) %}
	{% set featuredPost = featuredPost|merge({'post_category' : featuredPostCategory}) %}
	{% set featuredPost = featuredPost|merge({'post_info_subtitle' : featuredPostData.post_info_subtitle}) %}
	{% set featuredPost = featuredPost|merge({'post_info_description' : featuredPostData.post_info_description}) %}
	{% set featuredPost = featuredPost|merge({'post_link' : featuredPostData.link}) %}
	{% set featuredPost = featuredPost|merge({'featured_post_background_colour' : fields.featured_post_background_colour}) %}
	{% set featuredPost = featuredPost|merge({'featured_post_button_style' : fields.featured_post_button_style}) %}
{% endif %}

{% if fields.limit_posts_to_selected_categories %}
	{% set limitPostsToSelectedCategories = 'true' %}
{% else %}
	{% set limitPostsToSelectedCategories = 'false' %}
{% endif %}

{% set mappedIcons = function('cta_icon_map', options.theme_cta_icons) %}

{% set filterCategories = fields[postType ~ '_filter_categories'] %}
{% set taxonomies = [] %}
{% set categories = [] %}

{% for filterCatId in filterCategories %}
	{% set filterCat = fn( 'get_term', filterCatId ) %}
	{% set taxonomies = taxonomies|merge([filterCat]) %}
	{% set categories = categories|merge([filterCatId]) %}
{% endfor %}

{% set breakForLoop = false %}
{% set includeReviews = false %}
{% set reviewDisplayOptions = 'stars' %}
{% if postFieldConfig is not empty %}
	{% for singleField in postFieldConfig %}
		{% if singleField.acf_fc_layout == 'better_reviews' and breakForLoop == false %}
			{% set includeReviews = true %}
			{% if  singleField.display_settings.options  %}
				{% set reviewDisplayOptions = singleField.display_settings.options|join(',')|replace({'__': ""}) %}
			{% endif %}
			{% set breakForLoop = true %}
		{% endif %}
	{% endfor %}
{% endif %}


{% set updatedPosts = include('blocks/post-type-filter-grid-v2/ptfg-posts.twig', {reviewDisplayOptions, includeReviews})|json_decode() %}

{# Debug Dumps #}
{# <pre>
{{ dump('post type', updatedPosts.postType) }}
{{ dump('all-products', updatedPosts.allProducts) }}
{{ dump('sorting', updatedPosts.sorting) }}
{{ dump('totalposts', updatedPosts.total) }}
{{ dump('allPosts', updatedPosts.allPosts) }}
{{ dump('orderby', updatedPosts.orderby) }}
{{ dump('pagenum', updatedPosts.pageNum) }}
{{ dump('offset', updatedPosts.offset) }}
{{ dump('Limit posts to selected cats', updatedPosts.limitPostsToSelectedCategories) }}
{{ dump('default categories', updatedPosts.defaultCategory) }}
{{ dump('Category IDs', updatedPosts.categoryIds) }}
{{ dump('firstTimeMessageAll', updatedPosts.firstTimeMessageAll) }}
{{ dump('firstTimeMessage', updatedPosts.firstTimeMessage) }}
{{ dump('posts per page', updatedPosts.postsPerPage) }}
{{ dump('categories', updatedPosts.categories) }}
{{ dump(updatedPosts.allPosts|slice(1,12)) }}
{{ dump(updatedPosts.posts) }}
</pre> #}

{% set blockBackgroundColour = '--block-background-colour: ' ~ fields.block_background_colour ~ ';' %}
{% set gridBackgroundColour = '--grid-background-colour: ' ~ fields.grid_background_colour ~ ';' %}
{% set postImageAspectRatio = '--post-image-aspect-ratio:' ~ fields.post_image_aspect_ratio ~ ';' %}
{% set postImageFitStyle = '--post-image-fit-style:' ~ (fields.post_image_fit_style|ru|default('contain')) ~ ';' %}
{% set columnsDesktop = '--columns-desktop: ' ~ fields.columns_desktop ~ ';' %}
{% set columnsTablet = '--columns-portrait: ' ~ fields.columns_tablet_portrait ~ ';' %}
{% set columnsMobile = '--columns-mobile: ' ~ fields.columns_mobile ~ ';' %}
{% set gridGapMulti = '--gap-multiplier: ' ~ fields.grid_gap ~ ';' %}
{% set gridGapMultiPortrait = '--gap-multiplier-portrait: ' ~ fields.grid_gap_portrait|default(fields.grid_gap) ~ ';' %}
{% set gridGapMultiMobile = '--gap-multiplier-mobile: ' ~ fields.grid_gap_mobile|default(fields.grid_gap) ~ ';' %}

	{% if fields.enable_micro_grid_gap %}
	{% set microGridGapAmount = '--micro-grid-gap-amount: ' ~ fields.micro_grid_gap_amount ~ ';' %}
{% set microGridGapClass = blockClassName ~ '--micro-gap' %}
{% endif %}
{% set postContainerPadding = '--post-container-padding: ' ~ fields.post_container_padding ~ ';' %}
{% set postContainerPaddingMobile = '--post-container-padding-mobile: ' ~ fields.post_container_padding_mobile ~ ';' %}
{% set blockContainerVerticalAlign = '--block-container-vertical-align: ' ~ fields.post_container_vertical_align|ru ~ ';' %}
	{% if fields.enable_grid_border %}
	{% set gridBorderColour = '--grid-border-colour: ' ~ fields.grid_border_colour ~ ';' %}
{% set gridBorderWidth = '--grid-border-width: ' ~ fields.grid_border_width ~ ';' %}
{% endif %}
{% set filterCategoryGap = '--filter-category-gap: ' ~ fields.filter_category_gap ~ ';' %}
{% set filterBackgroundColour = '--filter-background-colour: ' ~ fields.filter_background_colour ~ ';' %}
{% set filterBackgroundColourMobile = '--filter-background-colour-mobile: ' ~ fields.filter_background_colour_mobile ~ ';' %}
{% set sectionStyles = styleEntryPoint ~ blockBackgroundColour ~ filterCategoryGap ~ gridBackgroundColour ~ gridGapMulti ~ gridGapMultiPortrait ~ gridGapMultiMobile ~ microGridGapAmount ~ gridBorderColour ~ gridBorderWidth ~ postContainerPadding ~ postContainerPaddingMobile ~ blockContainerVerticalAlign ~ columnsDesktop ~ columnsTablet ~ columnsMobile ~ backgroundColour ~ filterBackgroundColour ~ filterBackgroundColourMobile ~ postImageAspectRatio ~ postImageFitStyle ~ subFilterOverflowMobile ~ subFilterOverflowTablet ~ subFilterOverflowDesktop ~ subFilterOverflowMobileAlignment ~ subFilterOverflowTabletAlignment ~ subFilterOverflowDesktopAlignment %}
{% set sectionClasses = microGridGapClass %}
{% set blockIdPtfgData = 'ptfgData' ~ block.id %}

	<script>
window["{{ blockIdPtfgData }}"] = {{{ posts: updatedPosts.posts,
		allProducts: updatedPosts.allProducts,
		defaultCategory: updatedPosts.defaultCategory,
		options: [],
		sorting: updatedPosts.sorting,
		fields: fields,
		postDataConfig: postFieldConfig,
		reviewDisplayOptions: reviewDisplayOptions,
		includeReviews: includeReviews,
		taxonomies: taxonomies,
		featuredPost: featuredPost,
		mappedIcons: mappedIcons,
		ctaStyles: cta_styles.theme_cta_styles,
		cta_icons: options.theme_cta_icons,
		global_images: options.global_images,
		total: updatedPosts.total,
		ajaxUrl: ajaxUrl,
		currentMarket: fn('apply_filters', 'wpml_current_language', NULL)
	}|json_encode_2 }};
</script>
	<section {{ block.anchor ? 'id=' ~ block.anchor : '' }} class="{{ blockClassName }} {{ classNameEntryPoint }} {{ blockClassName }} {{ block.className }} {{ blockClassName }}--{{postType}} {{ sectionClasses }} lazy-fade" style="{{ sectionStyles }}" {{dataAttributeEntryPoint}} data-assetkey="{{ blockClassName }}"> <div id="posttypefiltergrid" data-blockid={{block.id}}></div>
	{{ htmlEntryPoint }}
	{% if fields.enable_pre_render_posts_html and not is_preview %}
		{{include('blocks/post-type-filter-grid-v2/pre-render-posts-html.twig', { updatedPosts: updatedPosts.posts, blockClassName }, with_context = false)}}
	{% endif %}
</section>
