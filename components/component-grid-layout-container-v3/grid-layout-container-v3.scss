@use '../fields-core-mixins-v3/core-mixins-v3';
@use '../fields-core-functions-v3/core-functions-v3';
@use '../../breakpoints';

@mixin scrollButtons() {
	&::scroll-button(left) {
		content: '◄';
		position: absolute;
		place-self: center flex-start;
		z-index: 50;
	}
	&::scroll-button(right) {
		content: '►';
		position: absolute;
		place-self: center flex-end;
		z-index: 50;
	}
	&::scroll-button(*) {
		border: 1px solid black;
		border-radius: 10px;
		font-size: var(
			--scroll-button-font-size,
			core-functions-v3.fluidSize(30)
		);
		background: rgba(0, 0, 0, 0.163);
		color: white;
		opacity: 0.7;
		cursor: pointer;
		transition: scale 0.3s ease-in-out;
	}
	&::scroll-button(*):hover,
	&::scroll-button(*):focus {
		opacity: 1;
		scale: 1.2;
	}
	&::scroll-button(*):active {
		translate: 1px 1px;
	}
	&::scroll-button(*):disabled {
		opacity: 0.2;
		cursor: unset;
	}
}
@mixin gridLayoutContainer() {
	display: var(--display-type, 'grid');
	position: relative;
	scroll-behavior: smooth;
	overscroll-behavior-x: contain;
	scroll-snap-type: var(--scroll-snap-type-mobile, none);
	> div {
		scroll-snap-align: var(--scroll-snap-align-mobile, start);
	}
	overflow: var(--container-overflow-type-mobile, hidden);
	grid-gap: calc(var(--global-inline-spacing) * var(--row-gap-mult-mobile, 0))
		calc(var(--global-inline-spacing) * var(--column-gap-mult-mobile, 0));
	grid-auto-flow: var(--grid-auto-flow-mobile, row);
	grid-auto-columns: var(--grid-auto-columns-mobile, 1fr);
	grid-auto-rows: var(--grid-auto-rows-mobile, auto);
	grid-template-columns: var(
		--grid-template-columns-custom-mobile,
		repeat(
			var(--grid-template-columns-mobile),
			var(--grid-auto-columns-mobile, 1fr)
		)
	);
	grid-template-rows: var(
		--grid-template-rows-custom-mobile,
		repeat(
			var(--grid-template-rows-mobile),
			var(--grid-auto-rows-mobile, 1fr)
		)
	);
	&.scroll-btns-desktop {
		@include core-mixins-v3.device(breakpoints.$tabLandscape) {
			@include scrollButtons();
		}
	}
	&.scroll-btns-portrait {
		@media screen and (min-width: #{breakpoints.$tabPortrait}) and (max-width: #{breakpoints.$tabLandscape - 1}) {
			@include scrollButtons();
		}
	}
	&.scroll-btns-mobile {
		@include core-mixins-v3.device(
			breakpoints.$tabPortrait - 1,
			'max-width'
		) {
			@include scrollButtons();
		}
	}

	@include core-mixins-v3.device(breakpoints.$tabPortrait) {
		scroll-snap-type: var(--scroll-snap-type-portrait, none);
		> div {
			scroll-snap-align: var(--scroll-snap-align-portrait, start);
		}
		overflow: var(--container-overflow-type-portrait, hidden);
		grid-auto-flow: var(--grid-auto-flow-portrait, row);
		grid-auto-columns: var(--grid-auto-columns-portrait, 1fr);
		grid-auto-rows: var(--grid-auto-rows-portrait, auto);
		grid-gap: calc(
				var(--global-inline-spacing) * var(--row-gap-mult-portrait, 0)
			)
			calc(
				var(--global-inline-spacing) *
					var(--column-gap-mult-portrait, 0)
			);
		grid-template-columns: var(
			--grid-template-columns-custom-portrait,
			repeat(
				var(--grid-template-columns-portrait),
				var(--grid-auto-columns-portrait, 1fr)
			)
		);
		grid-template-rows: var(
			--grid-template-rows-custom-portrait,
			repeat(
				var(--grid-template-rows-portrait),
				var(--grid-auto-rows-portrait, 1fr)
			)
		);
	}

	@include core-mixins-v3.device(breakpoints.$tabLandscape) {
		scroll-snap-type: var(--scroll-snap-type-desktop, none);
		> div {
			scroll-snap-align: var(--scroll-snap-align-desktop, start);
		}
		overflow: var(--container-overflow-type-desktop, hidden);
		grid-gap: calc(
				var(--global-inline-spacing) * var(--row-gap-mult-desktop, 0)
			)
			calc(
				var(--global-inline-spacing) * var(--column-gap-mult-desktop, 0)
			);
		grid-auto-flow: var(--grid-auto-flow-desktop, row);
		grid-auto-columns: var(--grid-auto-columns-desktop, 1fr);
		grid-auto-rows: var(--grid-auto-rows-desktop, auto);
		grid-template-columns: var(
			--grid-template-columns-custom-desktop,
			repeat(
				var(--grid-template-columns-desktop, 1),
				var(--grid-auto-columns-desktop, 1fr)
			)
		);
		grid-template-rows: var(
			--grid-template-rows-custom-desktop,
			repeat(
				var(--grid-template-rows-desktop),
				var(--grid-auto-rows-desktop, 1fr)
			)
		);
	}
}
